require(dplyr)
require(ggplot2)
install.packages(dplyr)
install.packages("dplyr")
install.packages("ggplot2")
install.packages("tm")
install.packages("lubridate")
install.packages("caret")
install.packages("rmarkdown", repos = "https://cran.revolutionanalytics.com")
install.packages("stringr")
install.packages("slam")
install.packages("RWeka")
?devtools
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("devtools")
install.packages("randomforest")
install.packages("devtools")
require(devtools)
install_github("slidify", "ramnathv")
library(slidify)
install_github("slidifyLibraries", "ramnathv")
shiny::runApp('C:/Users/apundhir/Desktop/final/en_US/predictiveshinyapp')
unigram <- read.csv2("C:\\Users\\apundhir\\Desktop\\final\\en_US\\unigram2.txt",
header = TRUE,
sep = "\t",
stringsAsFactors = FALSE)
bigram <- read.csv2("C:\\Users\\apundhir\\Desktop\\final\\en_US\\bigram2.txt",
header = TRUE,
sep = "\t",
stringsAsFactors = FALSE)
trigram <- read.csv2("C:\\Users\\apundhir\\Desktop\\final\\en_US\\trigram2.txt",
header = TRUE,
sep = "\t",
stringsAsFactors = FALSE)
quadgram <- read.csv2("C:\\Users\\apundhir\\Desktop\\final\\en_US\\quadgram2.txt",
header = TRUE,
sep = "\t",
stringsAsFactors = FALSE)
ngram <- read.csv2("C:\\Users\\apundhir\\Desktop\\final\\en_US\\ngram2.txt",
header = TRUE,
sep = "\t",
stringsAsFactors = FALSE)
setwd("C:\\Users\\apundhir\\Desktop\\final\\en_US\\predictiveshinyapp")
setwd("C:\\Users\\apundhir\\Desktop\\final\\en_US\\predictiveshinyapp\\data")
unigram <- saveRDS("unigram")
saveRDS("unigram", "unigram.rds")
saveRDS("bigram", "bigram.rds")
runApp('C:/Users/apundhir/Desktop/final/en_US/predictiveshinyapp')
runApp('C:/Users/apundhir/Desktop/final/en_US/predictiveshinyapp')
setwd("C:/Users/apundhir/Desktop/final/en_US")
#Accept Input and Parse it for comparision
input <- readLines("sample3.txt")
# remove punctuation
input <- gsub("[[:punct:]]", "", input)
# remove numbers
input <- gsub("[[:digit:]]", "", input)
# remove unnecessary spaces
input <- gsub("[ \t]{2,}", "", input)
input <- gsub("^\\s+|\\s+$", "", input)
#Removing Line breaks
input <- gsub("[\r\n]", "", input)
#Removing non graphical characters so that data can be processed by tm package
input <- str_replace_all(input,"[^[:graph:]]", " ")
#Removing all non alpha numeric characters
input <- gsub("[^[:alnum:][:blank:]']", "", input)
#Converting to lower case
input <- tolower(input)
input
i <- str_count(input, pattern = " ")
i
i <- i + 1
length(i)
for (j in 1: length(i)){
if (i[j] > 4){
matchpattern <- append(matchpattern, word(input[j], -4, -1))
}
}
matchpattern <- character(0)
for (j in 1: length(i)){
if (i[j] > 4){
matchpattern <- append(matchpattern, word(input[j], -4, -1))
}
}
matchpattern
i[1]
i
?word
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
setwd("C:/Users/apundhir/Desktop/final/en_US")
#Accept Input and Parse it for comparision
input <- readLines("sample3.txt")
# remove punctuation
input <- gsub("[[:punct:]]", "", input)
# remove numbers
input <- gsub("[[:digit:]]", "", input)
# remove unnecessary spaces
input <- gsub("[ \t]{2,}", "", input)
input <- gsub("^\\s+|\\s+$", "", input)
#Removing Line breaks
input <- gsub("[\r\n]", "", input)
#Removing non graphical characters so that data can be processed by tm package
input <- str_replace_all(input,"[^[:graph:]]", " ")
#Removing all non alpha numeric characters
input <- gsub("[^[:alnum:][:blank:]']", "", input)
#Converting to lower case
input <- tolower(input)
#Counting number of words
i <- str_count(input, pattern = " ")
i <- i + 1
matchpattern <- character(0)
ngramcompare <- function(matchpattern){
if (sum(grepl(matchpattern[j], ngram$lastfour))){
matchword <- paste( "^", matchpattern[j], "$", sep = "")
matchlist <-  filter(ngram,
grepl(matchword,
lastfour))
return (matchlist)
}
}
quadgramcompare <- function(matchpattern){
if (sum(grepl(word(matchpattern[j], 2, -1), quadgram$lastthree))){
matchword <- paste( "^", word(matchpattern[j], 2, -1), "$", sep = "")
matchlist <-  filter(quadgram,
grepl(matchword,
lastthree))
return (matchlist)
}
}
trigramcompare <- function(matchpattern){
if (sum(grepl(word(matchpattern[j], 3, -1), trigram$lasttwo))){
matchword <- paste( "^", word(matchpattern[j], 3, -1), "$", sep = "")
matchlist <-  filter(trigram,
grepl(matchword,
lasttwo))
return (matchlist)
}
}
bigramcompare <- function(matchpattern){
if (sum(grepl(word(matchpattern[j], 4, -1), trigram$lasttwo))){
matchword <- paste( "^", word(matchpattern[j], 4, -1), "$", sep = "")
matchlist <-  filter(bigram,
grepl(matchword,
last))
return (matchlist)
}
}
for (j in 1: length(i)){
if (i[j] > 4){
matchpattern <- append(matchpattern, word(input[j], -4, -1))
}
}
ngramfind <- FALSE
quadgramfind <- FALSE
trigramfind <- FALSE
bigramfind <- FALSE
#Backoff Calculation
if(ngramfind && quadgramfind && trigramfind) {
}
if(quadgramfind && trigramfind && bigramfind) {
}
matchngram <- ngramcompare (matchpattern)
matchquadgram <- quadgramcompare (matchpattern)
matchtrigram <- trigramcompare (matchpattern)
matchbigram <- bigramcompare (matchpattern)
matchunigram <- unigramcompare (matchpattern)
if (!is.null(matchngram)){
ngramfind <- TRUE
}
if (!is.null(matchquadgram)){
quadgramfind <- TRUE
}
if (!is.null(matchtrigram)){
trigramfind <- TRUE
}
if (!is.null(matchbigram)){
bigramfind <- TRUE
}
if (ngramfind){
#Getting List of Unique ngrams
matchngram$nnames <- as.character(matchngram$nnames)
matchngram$lastfour <- as.character(matchngram$lastfour)
matchngram$lastbutone <- as.character(matchngram$lastbutone)
ngramunique <- unique(matchngram$lastbutone)
ngramuniquecount <- filter(unigram,
uninames %in% ngramunique)
ntotal <- sum(matchngram$nfreq)
matchngram$nfreq <- matchngram$nfreq/ntotal
}
if (quadgramfind){
#Getting List of Unique quadgrams
matchquadgram$quadnames <- as.character(matchquadgram$quadnames)
matchquadgram$lastthree <- as.character(matchquadgram$lastthree)
matchquadgram$lastbutone <- as.character(matchquadgram$lastbutone)
quadgramunique <- unique(matchquadgram$lastbutone)
quadgramuniquecount <- filter(unigram,
uninames %in% quadgramunique)
quadtotal <- sum(matchquadgram$quadfreq)
matchquadgram$quadfreq <- matchquadgram$quadfreq/quadtotal
}
if (trigramfind){
#Getting List of Unique Trigrams
matchtrigram$trinames <- as.character(matchtrigram$trinames)
matchtrigram$lasttwo <- as.character(matchtrigram$lasttwo)
matchtrigram$lastbutone <- as.character(matchtrigram$lastbutone)
trigramunique <- unique(matchtrigram$lastbutone)
trigramuniquecount <- filter(unigram,
uninames %in% trigramunique)
tritotal <- sum(matchtrigram$trifreq)
matchtrigram$trifreq <- matchtrigram$trifreq/tritotal
}
if (bigramfind){
#Getting List of Unique bigrams
matchbigram$binames <- as.character(matchbigram$binames)
matchbigram$last <- as.character(matchbigram$last)
matchbigram$lastbutone <- as.character(matchbigram$lastbutone)
bigramunique <- unique(matchbigram$lastbutone)
bigramuniquecount <- filter(unigram,
uninames %in% bigramunique)
bitotal <- sum(matchbigram$bifreq)
matchbigram$bifreq <- matchbigram$bifreq/bitotal
}
x <- rbind(matchbigram, matchtrigram)
names(matchbigram)
names(matchtrigram)
matchbigram <- rename(matchbigram,
binames = name,
bifreq = freq)
matchbigram <- rename(matchbigram,
name = binames,
freq = bifreq)
matchtrigram <- rename(matchtrigram,
name = trinames,
freq = trifreq,
last = lasttwo)
x <- rbind(matchbigram, matchtrigram)
names(x)
x
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
head(matchbigram)
runApp('predictiveshinyapp')
sentences <- c("Jane saw a cat", "Jane sat down")
word(sentences, -1)
word(sentences, -2)
word(sentences, 4, -1)
sentences <- c("Jane saw a cat")
word(sentences, 4, -1)
names(bigram)
head(bigram, 1)
sentences <- c("Jane saw a cat")
word(sentences, 4, -1)
word(sentences, -2, -1)
word(sentences, -3, -1)
matchword <- paste( "^", word(matchpattern, -3, -1), "$", sep = "")
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
names(trigram)
if (!is.null(matchtrigram)){
}
runApp('predictiveshinyapp')
matchpattern <- "hi"
str_count(matchpattern, pattern = " ")
i <- str_count(matchpattern, pattern = " ")
i
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
str(trigram)
str(matchtrigram)
rm(matchtrigram)
rm(list = ls())
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
ngram <- read.csv2("data/ngram2.txt",
header = TRUE,
sep = "\t",
stringsAsFactors = FALSE)
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
runApp('predictiveshinyapp')
setwd("C:\Users\apundhir\Desktop\final\en_US\predictiveshinyapp")
setwd("C:\\Users\\apundhir\\Desktop\\final\\en_US\\predictiveshinyapp")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rm(ls = ls())
rm(list = ls())
runApp()
rm(list = ls())
exists(matchquadgram)
exists("matchquadgram")
runApp()
rm(list = ls())
runApp()
runApp()
?as.data.frame
runApp()
runApp()
runApp()
runApp()
finalmatch <- data.frame(name = character(),
freq = integer(),
last = character(),
lastbutone = character())
str(finalmatch)
finalmatch <- data.frame(name = character(),
freq = integer(),
last = character(),
lastbutone = character(),
stringsAsFactors = FALSE)
str(finalmatch)
rm(list = ls())
runApp()
getwd()
saveRDS("data/unigram2.txt", file="unigram.Rds")
saveRDS("data/bigram2.txt", file="bigram.Rds")
saveRDS("data/trigram2.txt", file="trigram.Rds")
saveRDS("data/quadgram2.txt", file="quadgram.Rds")
saveRDS("data/ngram2.txt", file="ngram.Rds")
runApp()
saveRDS("data/ngram2.txt", file="data/ngram.Rds")
saveRDS("data/quadgram2.txt", file="data/quadgram.Rds")
saveRDS("data/trigram2.txt", file="data/trigram.Rds")
saveRDS("data/bigram2.txt", file="data/bigram.Rds")
saveRDS("data/unigram2.txt", file="data/unigram.Rds")
runApp()
runApp()
